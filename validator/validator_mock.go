// Code generated by MockGen. DO NOT EDIT.
// Source: validate.go

// Package validator is a generated GoMock package.
package validator

import (
	reflect "reflect"

	validator "github.com/go-playground/validator/v10"
	gomock "github.com/golang/mock/gomock"
)

// MockValidate is a mock of Validate interface.
type MockValidate struct {
	ctrl     *gomock.Controller
	recorder *MockValidateMockRecorder
}

// MockValidateMockRecorder is the mock recorder for MockValidate.
type MockValidateMockRecorder struct {
	mock *MockValidate
}

// NewMockValidate creates a new mock instance.
func NewMockValidate(ctrl *gomock.Controller) *MockValidate {
	mock := &MockValidate{ctrl: ctrl}
	mock.recorder = &MockValidateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidate) EXPECT() *MockValidateMockRecorder {
	return m.recorder
}

// RegisterValidation mocks base method.
func (m *MockValidate) RegisterValidation(tag string, fn validator.Func, callValidationEvenIfNull ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tag, fn}
	for _, a := range callValidationEvenIfNull {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterValidation", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterValidation indicates an expected call of RegisterValidation.
func (mr *MockValidateMockRecorder) RegisterValidation(tag, fn interface{}, callValidationEvenIfNull ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tag, fn}, callValidationEvenIfNull...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterValidation", reflect.TypeOf((*MockValidate)(nil).RegisterValidation), varargs...)
}

// Struct mocks base method.
func (m *MockValidate) Struct(s interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockValidateMockRecorder) Struct(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockValidate)(nil).Struct), s)
}
